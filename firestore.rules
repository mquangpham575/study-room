rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function authPendingFR()
    {
      let diff = request.resource.data.diff(resource.data).affectedKeys();
      let field = diff.hasOnly(['pendingFR']);

      return field &&
      (request.auth.uid in request.resource.data.pendingFR
      || request.auth.uid in resource.data.pendingFR) &&
      math.abs(request.resource.data.pendingFR.size()
              - resource.data.pendingFR.size()) == 1;
    }

    match /tasks/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /events/{userId} {
      allow write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
    }

    match /quizzes/{quizId} {
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.owner;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.owner;
      allow read: if request.auth != null;

      match /questions/{questionId} {
        allow update, delete: if request.auth != null && quizId == resource.data.quizId;
        allow create: if request.auth != null && quizId == request.resource.data.quizId;
        allow read: if request.auth != null
        && (resource.data.size() == 0 
        || quizId == resource.data.quizId);
      }
    }

    match /profile/{userId} {
      allow write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
    }

    match /userchats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /chats/{chatId} {
      function getReqId() {
        return get(/databases/$(database)/documents/userchats/$(request.auth.uid)).data.roomIds;
      }
      
      allow read, write: if request.auth != null || chatId in getReqId();
    }

    match /chatrooms/{chatId} {
      function onlyRemoveSelf()
      {
        let diff = request.resource.data.diff(resource.data).affectedKeys();
        let field = diff.hasOnly(['members']);
        let reqMemberList = request.resource.data.members.toSet();
        let resMemberList = resource.data.members.toSet();

        return field &&
        request.auth.uid in resource.data.members &&
        resource.data.members.size() - request.resource.data.members.size() == 1 &&
        resMemberList.difference(reqMemberList) == [request.auth.uid].toSet();
      }

      allow update: if request.auth != null && onlyRemoveSelf();
      allow delete: if request.auth != null && resource.data.owner == request.auth.uid;
      allow create: if false;
      allow read: if request.auth != null && (
        resource.data.private == false || (request.auth.uid in resource.data.members)
      );
    }

    match /users/{userId} {
      allow update: if request.auth != null && ( request.auth.uid == userId || authPendingFR() );
      allow create, delete: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
    }
    
    // match /{document=**} {
    // 	allow read, write: if request.auth != null;
    // }
  }
}